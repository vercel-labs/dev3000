services:
  dev3000:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: dev3000
    init: true                  # PID1=tini (zombie process prevention)
    user: node
    working_dir: /workspace/example/nextjs15
    tty: true                   # Enable TTY for optional TUI mode
    stdin_open: true            # Keep STDIN open for TUI interactions

    environment:
      # --- CDP（ホストChrome制御） ---
      DEV3000_CDP: "1"
      DEV3000_CDP_URL: "http://host.docker.internal:9222"
      # --- ポート ---
      FRONTEND_PORT: "3000"
      DEV3000_PORT: "3684"
      # --- ホットリロード安定化（FS差吸収） ---
      CHOKIDAR_USEPOLLING: "true"
      WATCHPACK_POLLING: "true"
      NEXT_TELEMETRY_DISABLED: "1"

    volumes:
      - ../:/workspace:cached
      - dev3000_node_modules:/workspace/node_modules
      - next_node_modules:/workspace/example/nextjs15/node_modules

    # Linux でも host.docker.internal を使えるように
    extra_hosts:
      - "host.docker.internal:host-gateway"

    ports:
      - "3000:3000"             # Next.js
      - "3684:3684"             # Dev3000 UI/MCP

    # ← Dev3000 だけを起動。Dev3000 が Next.js（npm run dev）を子プロセス起動しログを取り込む
    command: >
      bash -lc "
        cd /workspace &&
        [ -x \"$(command -v corepack)\" ] && corepack enable && corepack prepare pnpm@10.15.0 --activate || true &&
        [ -d node_modules ] || pnpm install --frozen-lockfile || pnpm install &&
        pnpm run build &&
        cd /workspace/example/nextjs15 &&
        [ -d node_modules ] || pnpm install &&
        node /workspace/dist/cli.js --port ${FRONTEND_PORT} --port-mcp ${DEV3000_PORT} --no-tui
      "

    # どちらか応答すれば良し（UI or Next.js）
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:${DEV3000_PORT}/health || curl -fsS http://localhost:${FRONTEND_PORT} || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 10

    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL

volumes:
  dev3000_node_modules:
  next_node_modules:
